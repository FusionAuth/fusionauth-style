/*
 * Copyright (c) 2017-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

@import 'variables-functions-mixins';

//
// Column mixins
//
@mixin define-column($size, $width, $multiplier) {
  flex-basis: calc(#{$width} - #{$grid-spacing * $multiplier});
  max-width: calc(#{$width} - #{$grid-spacing * $multiplier});

  &.tight-both {
    flex-basis: calc(#{$width});
    max-width: calc(#{$width});
  }

  &.tight-left {
    flex-basis: calc(#{$width} - #{$grid-spacing});
    max-width: calc(#{$width} - #{$grid-spacing});
  }

  &.tight-neither {
    flex-basis: calc(#{$width} - #{$grid-spacing * $multiplier});
    max-width: calc(#{$width} - #{$grid-spacing * $multiplier});
  }

  &.tight-right {
    flex-basis: calc(#{$width} - #{$grid-spacing});
    max-width: calc(#{$width} - #{$grid-spacing});
  }

  &.tight-both-#{$size} {
    flex-basis: calc(#{$width});
    max-width: calc(#{$width});
  }

  &.tight-left-#{$size} {
    flex-basis: calc(#{$width} - #{$grid-spacing});
    max-width: calc(#{$width} - #{$grid-spacing});
  }

  &.tight-neither-#{$size} {
    flex-basis: calc(#{$width} - #{$grid-spacing * $multiplier});
    max-width: calc(#{$width} - #{$grid-spacing * $multiplier});
  }

  &.tight-right-#{$size} {
    flex-basis: calc(#{$width} - #{$grid-spacing});
    max-width: calc(#{$width} - #{$grid-spacing});
  }
}

@mixin define-column-size($size) {
  .col-#{$size},
  .col-#{$size}-1,
  .col-#{$size}-2,
  .col-#{$size}-3,
  .col-#{$size}-4,
  .col-#{$size}-5,
  .col-#{$size}-6,
  .col-#{$size}-7,
  .col-#{$size}-8,
  .col-#{$size}-9,
  .col-#{$size}-10,
  .col-#{$size}-11,
  .col-#{$size}-12 {
    box-sizing: border-box;
    flex: 0 0 auto;
    margin-right: $grid-spacing;
    margin-left: $grid-spacing;
    overflow: inherit;

    &.tight-both {
      margin-left: 0;
      margin-right: 0;
    }

    &.tight-left {
      margin-left: 0;
      margin-right: $grid-spacing;
    }

    &.tight-neither {
      margin-left: $grid-spacing;
      margin-right: $grid-spacing;
    }

    &.tight-right {
      margin-left: $grid-spacing;
      margin-right: 0;
    }

    &.tight-both-#{$size} {
      margin-left: 0;
      margin-right: 0;
    }

    &.tight-left-#{$size} {
      margin-left: 0;
      margin-right: $grid-spacing;
    }

    &.tight-neither-#{$size} {
      margin-left: $grid-spacing;
      margin-right: $grid-spacing;
    }

    &.tight-right-#{$size} {
      margin-left: $grid-spacing;
      margin-right: 0;
    }
  }

  .col-#{$size} {
    flex-grow: 1;
    flex-basis: 0;
    width: calc(100% - #{$grid-spacing * 2});

    &.tight-both {
      width: calc(100%);
    }

    &.tight-both-#{$size} {
      width: calc(100%);
    }
  }

  .col-#{$size}-0 {
    overflow: hidden;
    width: 0;
  }

  .col-#{$size}-1 {
    @include define-column($size, 8.33333333%, 2);
  }

  .col-#{$size}-2 {
    @include define-column($size, 16.66666667%, 2);
  }

  .col-#{$size}-3 {
    @include define-column($size, 25%, 2);
  }

  .col-#{$size}-4 {
    @include define-column($size, 33.33333333%, 2);
  }

  .col-#{$size}-5 {
    @include define-column($size, 41.66666667%, 2);
  }

  .col-#{$size}-6 {
    @include define-column($size, 50%, 2);
  }

  .col-#{$size}-7 {
    @include define-column($size, 58.33333333%, 2);
  }

  .col-#{$size}-8 {
    @include define-column($size, 66.66666667%, 2);
  }

  .col-#{$size}-9 {
    @include define-column($size, 75%, 2);
  }

  .col-#{$size}-10 {
    @include define-column($size, 83.33333333%, 2);
  }

  .col-#{$size}-11 {
    @include define-column($size, 91.66666667%, 2);
  }

  .col-#{$size}-12 {
    @include define-column($size, 100%, 2);
  }

  .col-#{$size}-offset-0 {
    margin-left: $grid-spacing;
  }

  .col-#{$size}-offset-1 {
    margin-left: calc(8.33333333% + #{$grid-spacing});
  }

  .col-#{$size}-offset-2 {
    margin-left: calc(16.66666667% + #{$grid-spacing});
  }

  .col-#{$size}-offset-3 {
    margin-left: calc(25% + #{$grid-spacing});
  }

  .col-#{$size}-offset-4 {
    margin-left: calc(33.33333333% + #{$grid-spacing});
  }

  .col-#{$size}-offset-5 {
    margin-left: calc(41.66666667% + #{$grid-spacing});
  }

  .col-#{$size}-offset-6 {
    margin-left: calc(50% + #{$grid-spacing});
  }

  .col-#{$size}-offset-7 {
    margin-left: calc(58.33333333% + #{$grid-spacing});
  }

  .col-#{$size}-offset-8 {
    margin-left: calc(66.66666667% + #{$grid-spacing});
  }

  .col-#{$size}-offset-9 {
    margin-left: calc(75% + #{$grid-spacing});
  }

  .col-#{$size}-offset-10 {
    margin-left: calc(83.33333333% + #{$grid-spacing});
  }

  .col-#{$size}-offset-11 {
    margin-left: calc(91.66666667% + #{$grid-spacing});
  }

  .start-#{$size} {
    justify-content: flex-start;
  }

  .center-#{$size} {
    justify-content: center;
  }

  .end-#{$size} {
    justify-content: flex-end;
  }

  .top-#{$size} {
    align-items: flex-start;
  }

  .middle-#{$size} {
    align-items: center;
  }

  .bottom-#{$size} {
    align-items: flex-end;
  }

  .baseline-#{$size} {
    align-items: baseline;
  }

  .around-#{$size} {
    justify-content: space-around;
  }

  .between-#{$size} {
    justify-content: space-between;
  }

  .first-#{$size} {
    order: -1;
  }

  .last-#{$size} {
    order: 1;
  }

  .shrink {
    flex-grow: 0;
    flex-shrink: 1;
  }
}

.first {
  order: -1;
}

.last {
  order: 1;
}


//
// Container mixin
//
@mixin define-container($width) {
  .container {
    width: $width;
  }
}

//
// Fluid Container mixin
//
@mixin define-container-fluid($padding) {
  .container-fluid {
    padding-right: $padding;
    padding-left: $padding;
  }
}

.container-fluid,
.container {
  margin-right: auto;
  margin-left: auto;
}

.row {
  align-items: stretch;
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;

  &.around {
    justify-content: space-around;
  }

  &.baseline {
    align-items: baseline;
  }

  &.between {
    justify-content: space-between;
  }

  &.bottom {
    align-items: flex-end;
  }

  &.center {
    justify-content: center;
  }

  &.end {
    justify-content: flex-end;
  }

  &.middle {
    align-items: center;
  }

  &.no-margin {
    margin-left: -$grid-spacing;
    margin-right: -$grid-spacing;
  }

  &.separate {
    margin-top: 50px;
  }

  &.start {
    justify-content: flex-start;
  }

  &.top {
    align-items: flex-start;
  }
}

.column {
  align-content: stretch;
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;

  > * {
    flex: 1 0 auto;
  }

  .baseline {
    flex: 0;
  }

  &.around {
    align-content: space-around;
  }

  &.between {
    align-content: space-between;
  }

  &.center {
    align-content: center;
  }

  &.end {
    align-content: flex-end;
  }

  &.start {
    align-content: flex-start;
  }
}

.row.reverse {
  flex-direction: row-reverse;
}

.col.reverse {
  flex-direction: column-reverse;
}

//
// Grid helpers
//
.align-items-center {
  align-items: center;
}

@include define-container-fluid(5px);
@include define-column-size(xs);

//
// Define the main grid
//
@each $break, $width in map-deep-get($grid-settings, 'widths') {
  $container: map-deep-get($grid-settings, 'containers', $break);
  @media only screen and (min-width:$width) {
    @include define-container($container);
    @include define-column-size($break);

    @if $break == 'sm' {
      @include define-container-fluid(20px);
    }
  }
}
