/*
 * Copyright (c) 2016-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"
primejsVersion = "1.2.0"

project(group: "io.fusionauth", name: "fusionauth-style", version: "0.1.31", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  dependencies {
    group(name: "prime.js", export: false) {
      dependency(id: "org.inversoft.prime:prime.js:prime-es6:${primejsVersion}:js")
    }
  }

  publications {
    main {
      publication(name: project.name, type: "css", file: "build/css/fusionauth-style.css", source: "build/css/fusionauth-style.css")
      publication(name: project.name, type: "zip", file: "build/fusionauth-style.zip")
    }
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantVersion}")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Deletes the build dir") {
  file.prune(dir: "build")
}

target(name: "js", description: "Copies the Prime.js files to the js dir") {
  file.delete {
    fileSet(dir: "js", includePatterns: [~/prime.+\.js/, ~/prime-es6.js/])
  }
  dependency.copy(to: "js") {
    dependencies(group: "prime.js", transitive: false, fetchSource: false)
  }
  file.rename {
    fileSet(dir: "js")
    filter(token: "prime-es6-${primejsVersion}", value: "prime-es6")
  }
}

target(name: "serve") {
  if (new ProcessBuilder('bundle', 'exec', 'jekyll', 'serve').inheritIO().start().waitFor() != 0) {
    fail("run failed")
  }
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["js"]) {
  file.mkdir(dir: "build/css")
  file.mkdir(dir: "build/sass")

  file.copy(to: "build/sass") {
    fileSet(dir: "_sass")
  }

  file.delete {
    fileSet(dir: "build", includePatterns: [~/fusionauth-style.+\.zip/])
  }

  file.zip(file: "build/fusionauth-style.zip") {
    fileSet(dir: "build/sass", includePatterns: [])
  }

  file.delete {
    fileSet(dir: "build/css", includePatterns: [~/.+/])
  }

  if (new ProcessBuilder("sass", "_sass/fusionauth-style.scss", "build/css/intermediate.css").inheritIO().start().waitFor() != 0) {
    fail("Failed while calling sass")
  }

  if (new ProcessBuilder("node_modules/postcss-cli/bin/postcss", "build/css/intermediate.css", "--use", "autoprefixer", "--use", "cssnano", "-o" , "build/css/fusionauth-style.css").inheritIO().start().waitFor() != 0) {
    fail("Failed while calling postcss")
  }

  dependency.integrate()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}
